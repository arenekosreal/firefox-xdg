diff --git a/toolkit/crashreporter/client/app/src/config.rs b/toolkit/crashreporter/client/app/src/config.rs
--- a/toolkit/crashreporter/client/app/src/config.rs
+++ b/toolkit/crashreporter/client/app/src/config.rs
@@ -19,11 +19,11 @@
 pub mod test {
     pub const MINIDUMP_PRUNE_SAVE_COUNT: usize = super::MINIDUMP_PRUNE_SAVE_COUNT;
 
     cfg_if::cfg_if! {
         if #[cfg(target_os = "linux")] {
-            use crate::std::{mock, env};
+            use crate::std::{mock, env, fs::MockFS, fs::MockFiles};
 
             fn cfg_get_data_dir_root() -> crate::std::path::PathBuf {
                 let cfg = super::Config::new();
                 cfg.get_data_dir_root("vendor").unwrap()
             }
@@ -39,10 +39,11 @@
             }
 
             #[test]
             fn data_dir_root_xdg_home() {
                 mock::builder()
+                    .set(env::MockHomeDir, "home_dir".into())
                     .set(env::MockEnv("XDG_CONFIG_HOME".into()), "home_dir/xdg/config".into())
                     .run(|| {
                         let path = cfg_get_data_dir_root();
                         assert_eq!(path, crate::std::path::PathBuf::from("home_dir/xdg/config/vendor"));
                     });
@@ -56,10 +57,24 @@
                     .run(|| {
                         let path = cfg_get_data_dir_root();
                         assert_eq!(path, crate::std::path::PathBuf::from("home_dir/.vendor"));
                     });
             }
+
+            #[test]
+            fn data_dir_root_legacy_existing() {
+                let mock_files = MockFiles::new();
+                mock_files.add_dir("home_dir").add_dir("home_dir/.vendor");
+
+                mock::builder()
+                    .set(env::MockHomeDir, "home_dir".into())
+                    .set(MockFS, mock_files.clone())
+                    .run(|| {
+                        let path = cfg_get_data_dir_root();
+                        assert_eq!(path, crate::std::path::PathBuf::from("home_dir/.vendor"));
+                    });
+            }
         }
     }
 }
 
 mod buildid_section {
@@ -495,16 +510,23 @@
 
     #[cfg(all(target_os = "linux", any(not(mock), test)))]
     fn get_data_dir_root(&self, vendor: &str) -> anyhow::Result<PathBuf> {
         // home_dir is deprecated due to incorrect behavior on windows, but we only use it on linux
         #[allow(deprecated)]
-        let data_path = if std::env::var_os("MOZ_LEGACY_HOME").is_some() {
-            std::env::home_dir().map(|h| h.join(format!(".{}", vendor.to_lowercase())))
+        let home_dir = std::env::home_dir();
+
+        let legacy_data = home_dir
+            .clone()
+            .map(|h| h.join(format!(".{}", vendor.to_lowercase())));
+        let data_path = if std::env::var_os("MOZ_LEGACY_HOME").is_some()
+            || legacy_data.as_ref().expect("No HOME env?").exists()
+        {
+            legacy_data
         } else {
             std::env::var_os("XDG_CONFIG_HOME")
                 .map(PathBuf::from)
-                .or_else(|| std::env::home_dir().map(|home| home.join(".config")))
+                .or_else(|| home_dir.map(|home| home.join(".config")))
                 .map(|h| h.join(format!("{}", vendor.to_lowercase())))
         }
         .with_context(|| self.string("crashreporter-error-no-home-dir"))?;
         Ok(data_path)
     }
diff --git a/toolkit/crashreporter/crash_helper_server/src/logging/env.rs b/toolkit/crashreporter/crash_helper_server/src/logging/env.rs
--- a/toolkit/crashreporter/crash_helper_server/src/logging/env.rs
+++ b/toolkit/crashreporter/crash_helper_server/src/logging/env.rs
@@ -31,11 +31,19 @@
 fn guess_user_app_data_dir() -> Option<PathBuf> {
     let home_dir = dirs::home_dir()?;
 
     cfg_if! {
         if #[cfg(target_os = "linux")] {
-            Some(home_dir.join(".mozilla").join(config::MOZ_APP_NAME))
+            use std::fs::exists;
+
+            let legacy_data = home_dir.join(".mozilla").join(config::MOZ_APP_NAME);
+            let data_path = if std::env::var_os("MOZ_LEGACY_HOME").is_some() || exists(&legacy_data).ok()? {
+                legacy_data
+            } else {
+                dirs::config_dir()?.join(".mozilla").join(config::MOZ_APP_NAME)
+            };
+            Some(data_path)
         } else if #[cfg(target_os = "macos")] {
             Some(home_dir.join("Library").join("Application Support").join(config::MOZ_APP_BASENAME))
         } else if #[cfg(target_os = "windows")] {
             Some(home_dir.join("AppData").join("Roaming").join(config::MOZ_APP_VENDOR).join(config::MOZ_APP_BASENAME))
         } else {

